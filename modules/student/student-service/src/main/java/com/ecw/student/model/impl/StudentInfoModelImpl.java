/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ecw.student.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.ecw.student.model.StudentInfo;
import com.ecw.student.model.StudentInfoModel;
import com.ecw.student.model.StudentInfoSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the StudentInfo service. Represents a row in the &quot;StudentInfo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link StudentInfoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StudentInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StudentInfoImpl
 * @see StudentInfo
 * @see StudentInfoModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class StudentInfoModelImpl extends BaseModelImpl<StudentInfo>
	implements StudentInfoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a student info model instance should use the {@link StudentInfo} interface instead.
	 */
	public static final String TABLE_NAME = "StudentInfo";
	public static final Object[][] TABLE_COLUMNS = {
			{ "Id", Types.BIGINT },
			{ "StudentId", Types.BIGINT },
			{ "FirstName", Types.VARCHAR },
			{ "LastName", Types.VARCHAR },
			{ "BloodGroup", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("Id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("StudentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("FirstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BloodGroup", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table StudentInfo (Id LONG not null primary key,StudentId LONG,FirstName VARCHAR(75) null,LastName VARCHAR(75) null,BloodGroup VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table StudentInfo";
	public static final String ORDER_BY_JPQL = " ORDER BY studentInfo.Id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY StudentInfo.Id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.ecw.student.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ecw.student.model.StudentInfo"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.ecw.student.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ecw.student.model.StudentInfo"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static StudentInfo toModel(StudentInfoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		StudentInfo model = new StudentInfoImpl();

		model.setId(soapModel.getId());
		model.setStudentId(soapModel.getStudentId());
		model.setFirstName(soapModel.getFirstName());
		model.setLastName(soapModel.getLastName());
		model.setBloodGroup(soapModel.getBloodGroup());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<StudentInfo> toModels(StudentInfoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<StudentInfo> models = new ArrayList<StudentInfo>(soapModels.length);

		for (StudentInfoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.ecw.student.service.util.ServiceProps.get(
				"lock.expiration.time.com.ecw.student.model.StudentInfo"));

	public StudentInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _Id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StudentInfo.class;
	}

	@Override
	public String getModelClassName() {
		return StudentInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("Id", getId());
		attributes.put("StudentId", getStudentId());
		attributes.put("FirstName", getFirstName());
		attributes.put("LastName", getLastName());
		attributes.put("BloodGroup", getBloodGroup());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long Id = (Long)attributes.get("Id");

		if (Id != null) {
			setId(Id);
		}

		Long StudentId = (Long)attributes.get("StudentId");

		if (StudentId != null) {
			setStudentId(StudentId);
		}

		String FirstName = (String)attributes.get("FirstName");

		if (FirstName != null) {
			setFirstName(FirstName);
		}

		String LastName = (String)attributes.get("LastName");

		if (LastName != null) {
			setLastName(LastName);
		}

		String BloodGroup = (String)attributes.get("BloodGroup");

		if (BloodGroup != null) {
			setBloodGroup(BloodGroup);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _Id;
	}

	@Override
	public void setId(long Id) {
		_Id = Id;
	}

	@JSON
	@Override
	public long getStudentId() {
		return _StudentId;
	}

	@Override
	public void setStudentId(long StudentId) {
		_StudentId = StudentId;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_FirstName == null) {
			return "";
		}
		else {
			return _FirstName;
		}
	}

	@Override
	public void setFirstName(String FirstName) {
		_FirstName = FirstName;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_LastName == null) {
			return "";
		}
		else {
			return _LastName;
		}
	}

	@Override
	public void setLastName(String LastName) {
		_LastName = LastName;
	}

	@JSON
	@Override
	public String getBloodGroup() {
		if (_BloodGroup == null) {
			return "";
		}
		else {
			return _BloodGroup;
		}
	}

	@Override
	public void setBloodGroup(String BloodGroup) {
		_BloodGroup = BloodGroup;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			StudentInfo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StudentInfo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StudentInfo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StudentInfoImpl studentInfoImpl = new StudentInfoImpl();

		studentInfoImpl.setId(getId());
		studentInfoImpl.setStudentId(getStudentId());
		studentInfoImpl.setFirstName(getFirstName());
		studentInfoImpl.setLastName(getLastName());
		studentInfoImpl.setBloodGroup(getBloodGroup());

		studentInfoImpl.resetOriginalValues();

		return studentInfoImpl;
	}

	@Override
	public int compareTo(StudentInfo studentInfo) {
		long primaryKey = studentInfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StudentInfo)) {
			return false;
		}

		StudentInfo studentInfo = (StudentInfo)obj;

		long primaryKey = studentInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<StudentInfo> toCacheModel() {
		StudentInfoCacheModel studentInfoCacheModel = new StudentInfoCacheModel();

		studentInfoCacheModel.Id = getId();

		studentInfoCacheModel.StudentId = getStudentId();

		studentInfoCacheModel.FirstName = getFirstName();

		String FirstName = studentInfoCacheModel.FirstName;

		if ((FirstName != null) && (FirstName.length() == 0)) {
			studentInfoCacheModel.FirstName = null;
		}

		studentInfoCacheModel.LastName = getLastName();

		String LastName = studentInfoCacheModel.LastName;

		if ((LastName != null) && (LastName.length() == 0)) {
			studentInfoCacheModel.LastName = null;
		}

		studentInfoCacheModel.BloodGroup = getBloodGroup();

		String BloodGroup = studentInfoCacheModel.BloodGroup;

		if ((BloodGroup != null) && (BloodGroup.length() == 0)) {
			studentInfoCacheModel.BloodGroup = null;
		}

		return studentInfoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{Id=");
		sb.append(getId());
		sb.append(", StudentId=");
		sb.append(getStudentId());
		sb.append(", FirstName=");
		sb.append(getFirstName());
		sb.append(", LastName=");
		sb.append(getLastName());
		sb.append(", BloodGroup=");
		sb.append(getBloodGroup());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.ecw.student.model.StudentInfo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>Id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>StudentId</column-name><column-value><![CDATA[");
		sb.append(getStudentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>FirstName</column-name><column-value><![CDATA[");
		sb.append(getFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>LastName</column-name><column-value><![CDATA[");
		sb.append(getLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>BloodGroup</column-name><column-value><![CDATA[");
		sb.append(getBloodGroup());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = StudentInfo.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			StudentInfo.class, ModelWrapper.class
		};
	private long _Id;
	private long _StudentId;
	private String _FirstName;
	private String _LastName;
	private String _BloodGroup;
	private StudentInfo _escapedModel;
}