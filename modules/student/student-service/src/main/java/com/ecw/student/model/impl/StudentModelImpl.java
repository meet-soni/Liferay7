/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ecw.student.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.ecw.student.model.Student;
import com.ecw.student.model.StudentModel;
import com.ecw.student.model.StudentSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Student service. Represents a row in the &quot;Student&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link StudentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StudentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StudentImpl
 * @see Student
 * @see StudentModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class StudentModelImpl extends BaseModelImpl<Student>
	implements StudentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a student model instance should use the {@link Student} interface instead.
	 */
	public static final String TABLE_NAME = "Student";
	public static final Object[][] TABLE_COLUMNS = {
			{ "Id", Types.BIGINT },
			{ "Name", Types.VARCHAR },
			{ "Address", Types.VARCHAR },
			{ "Std", Types.INTEGER },
			{ "Divison", Types.VARCHAR },
			{ "PhoneNo", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("Id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("Name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Std", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("Divison", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PhoneNo", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table Student (Id LONG not null primary key,Name VARCHAR(75) null,Address VARCHAR(75) null,Std INTEGER,Divison VARCHAR(75) null,PhoneNo LONG)";
	public static final String TABLE_SQL_DROP = "drop table Student";
	public static final String ORDER_BY_JPQL = " ORDER BY student.Id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Student.Id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.ecw.student.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ecw.student.model.Student"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.ecw.student.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ecw.student.model.Student"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.ecw.student.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ecw.student.model.Student"),
			true);
	public static final long DIVISON_COLUMN_BITMASK = 1L;
	public static final long STD_COLUMN_BITMASK = 2L;
	public static final long ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Student toModel(StudentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Student model = new StudentImpl();

		model.setId(soapModel.getId());
		model.setName(soapModel.getName());
		model.setAddress(soapModel.getAddress());
		model.setStd(soapModel.getStd());
		model.setDivison(soapModel.getDivison());
		model.setPhoneNo(soapModel.getPhoneNo());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Student> toModels(StudentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Student> models = new ArrayList<Student>(soapModels.length);

		for (StudentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.ecw.student.service.util.ServiceProps.get(
				"lock.expiration.time.com.ecw.student.model.Student"));

	public StudentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _Id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Student.class;
	}

	@Override
	public String getModelClassName() {
		return Student.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("Id", getId());
		attributes.put("Name", getName());
		attributes.put("Address", getAddress());
		attributes.put("Std", getStd());
		attributes.put("Divison", getDivison());
		attributes.put("PhoneNo", getPhoneNo());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long Id = (Long)attributes.get("Id");

		if (Id != null) {
			setId(Id);
		}

		String Name = (String)attributes.get("Name");

		if (Name != null) {
			setName(Name);
		}

		String Address = (String)attributes.get("Address");

		if (Address != null) {
			setAddress(Address);
		}

		Integer Std = (Integer)attributes.get("Std");

		if (Std != null) {
			setStd(Std);
		}

		String Divison = (String)attributes.get("Divison");

		if (Divison != null) {
			setDivison(Divison);
		}

		Long PhoneNo = (Long)attributes.get("PhoneNo");

		if (PhoneNo != null) {
			setPhoneNo(PhoneNo);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _Id;
	}

	@Override
	public void setId(long Id) {
		_Id = Id;
	}

	@JSON
	@Override
	public String getName() {
		if (_Name == null) {
			return "";
		}
		else {
			return _Name;
		}
	}

	@Override
	public void setName(String Name) {
		_Name = Name;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_Address == null) {
			return "";
		}
		else {
			return _Address;
		}
	}

	@Override
	public void setAddress(String Address) {
		_Address = Address;
	}

	@JSON
	@Override
	public int getStd() {
		return _Std;
	}

	@Override
	public void setStd(int Std) {
		_columnBitmask |= STD_COLUMN_BITMASK;

		if (!_setOriginalStd) {
			_setOriginalStd = true;

			_originalStd = _Std;
		}

		_Std = Std;
	}

	public int getOriginalStd() {
		return _originalStd;
	}

	@JSON
	@Override
	public String getDivison() {
		if (_Divison == null) {
			return "";
		}
		else {
			return _Divison;
		}
	}

	@Override
	public void setDivison(String Divison) {
		_columnBitmask |= DIVISON_COLUMN_BITMASK;

		if (_originalDivison == null) {
			_originalDivison = _Divison;
		}

		_Divison = Divison;
	}

	public String getOriginalDivison() {
		return GetterUtil.getString(_originalDivison);
	}

	@JSON
	@Override
	public long getPhoneNo() {
		return _PhoneNo;
	}

	@Override
	public void setPhoneNo(long PhoneNo) {
		_PhoneNo = PhoneNo;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Student.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Student toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Student)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StudentImpl studentImpl = new StudentImpl();

		studentImpl.setId(getId());
		studentImpl.setName(getName());
		studentImpl.setAddress(getAddress());
		studentImpl.setStd(getStd());
		studentImpl.setDivison(getDivison());
		studentImpl.setPhoneNo(getPhoneNo());

		studentImpl.resetOriginalValues();

		return studentImpl;
	}

	@Override
	public int compareTo(Student student) {
		long primaryKey = student.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Student)) {
			return false;
		}

		Student student = (Student)obj;

		long primaryKey = student.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		StudentModelImpl studentModelImpl = this;

		studentModelImpl._originalStd = studentModelImpl._Std;

		studentModelImpl._setOriginalStd = false;

		studentModelImpl._originalDivison = studentModelImpl._Divison;

		studentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Student> toCacheModel() {
		StudentCacheModel studentCacheModel = new StudentCacheModel();

		studentCacheModel.Id = getId();

		studentCacheModel.Name = getName();

		String Name = studentCacheModel.Name;

		if ((Name != null) && (Name.length() == 0)) {
			studentCacheModel.Name = null;
		}

		studentCacheModel.Address = getAddress();

		String Address = studentCacheModel.Address;

		if ((Address != null) && (Address.length() == 0)) {
			studentCacheModel.Address = null;
		}

		studentCacheModel.Std = getStd();

		studentCacheModel.Divison = getDivison();

		String Divison = studentCacheModel.Divison;

		if ((Divison != null) && (Divison.length() == 0)) {
			studentCacheModel.Divison = null;
		}

		studentCacheModel.PhoneNo = getPhoneNo();

		return studentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{Id=");
		sb.append(getId());
		sb.append(", Name=");
		sb.append(getName());
		sb.append(", Address=");
		sb.append(getAddress());
		sb.append(", Std=");
		sb.append(getStd());
		sb.append(", Divison=");
		sb.append(getDivison());
		sb.append(", PhoneNo=");
		sb.append(getPhoneNo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.ecw.student.model.Student");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>Id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Std</column-name><column-value><![CDATA[");
		sb.append(getStd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Divison</column-name><column-value><![CDATA[");
		sb.append(getDivison());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PhoneNo</column-name><column-value><![CDATA[");
		sb.append(getPhoneNo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Student.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Student.class, ModelWrapper.class
		};
	private long _Id;
	private String _Name;
	private String _Address;
	private int _Std;
	private int _originalStd;
	private boolean _setOriginalStd;
	private String _Divison;
	private String _originalDivison;
	private long _PhoneNo;
	private long _columnBitmask;
	private Student _escapedModel;
}